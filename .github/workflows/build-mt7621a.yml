name: Build QModem for MT7621a

on:
  workflow_dispatch:
  push:
    branches: ["main"]

env:
  PRIMARY_URL: "https://downloads.openwrt.org/releases/22.03.3/targets/ramips/mt7621/openwrt-sdk-22.03.3-ramips-mt7621_gcc-11.2.0_musl.Linux-x86_64.tar.xz"
  BACKUP_URL: "https://mirror.0x.si/openwrt/releases/22.03.3/targets/ramips/mt7621/openwrt-sdk-22.03.3-ramips-mt7621_gcc-11.2.0_musl.Linux-x86_64.tar.xz"

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libncurses5-dev \
            zlib1g-dev \
            wget \
            file \
            rsync

      - name: Download SDK
        id: download_sdk
        run: |
          max_retries=3
          retry_delay=10
          sdk_file="openwrt-sdk.tar.xz"
          min_size=100000000

          # Primary mirror attempts
          for ((i=1; i<=$max_retries; i++)); do
            echo "Attempt $i: Downloading from primary mirror..."
            if wget -T 60 -O "$sdk_file" "$PRIMARY_URL"; then
              if [ $(stat -c%s "$sdk_file") -gt $min_size ]; then
                echo "Download successful!"
                exit 0
              else
                echo "File too small, may be corrupted"
                rm -f "$sdk_file"
              fi
            fi
            sleep $retry_delay
          done

          # Fallback mirror
          echo "Trying fallback mirror..."
          if ! wget -T 120 -O "$sdk_file" "$BACKUP_URL"; then
            echo "::error::All download attempts failed"
            exit 1
          fi

          # Final verification
          if [ $(stat -c%s "$sdk_file") -lt $min_size ]; then
            echo "::error::Downloaded file is too small (likely incomplete)"
            exit 1
          fi

      - name: Extract SDK
        run: |
          tar -xvf openwrt-sdk.tar.xz
          SDK_DIR=$(find . -maxdepth 1 -type d -name "openwrt-sdk-*")
          [ -z "$SDK_DIR" ] && echo "::error::Could not find extracted SDK" && exit 1
          mv "$SDK_DIR" sdk
          echo "SDK_PATH=$(pwd)/sdk" >> $GITHUB_ENV

      - name: Prepare package
        run: |
          PKG_DIR="${{ env.SDK_PATH }}/package/qmodem"
          rm -rf "$PKG_DIR" || true
          mkdir -p "$PKG_DIR"
          rsync -av \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='sdk' \
            "$GITHUB_WORKSPACE/" "$PKG_DIR/"

          # Verify essential files
          [ -f "$PKG_DIR/Makefile" ] || {
            echo "::error::Makefile is missing"
            ls -la "$PKG_DIR"
            exit 1
          }

      - name: Compile package
        env:
          TERM: dumb
        run: |
          cd "${{ env.SDK_PATH }}"
          
          # Setup environment
          export STAGING_DIR="${{ env.SDK_PATH }}/staging_dir"
          export PATH="$STAGING_DIR/toolchain-mipsel_24kc_gcc-11.2.0_musl/bin:$PATH"
          
          # Initialize feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # Force enable package
          cat <<EOF > .config
          CONFIG_PACKAGE_qmodem=y
          EOF
          
          # Compile
          make package/qmodem/compile V=s 2>&1 | tee compile.log
          grep -i "error" compile.log && exit 1

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipk-package
          path: |
            "${{ env.SDK_PATH }}/bin/packages/*/*.ipk"
            "${{ env.SDK_PATH }}/compile.log"
