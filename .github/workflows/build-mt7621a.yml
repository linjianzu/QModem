name: Build QModem for MT7621a (Robust Version)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

env:
  SDK_URL: https://downloads.openwrt.org/releases/22.03.3/targets/ramips/mt7621/openwrt-sdk-22.03.3-ramips-mt7621_gcc-11.2.0_musl.Linux-x86_64.tar.xz
  MIRROR_URL: https://mirror.0x.si/openwrt/releases/22.03.3/targets/ramips/mt7621/openwrt-sdk-22.03.3-ramips-mt7621_gcc-11.2.0_musl.Linux-x86_64.tar.xz

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize environment
      run: |
        # Clean workspace
        sudo rm -rf /usr/local/lib/android /opt/hostedtoolcache
        
        # Install core deps
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libncurses5-dev \
          zlib1g-dev \
          file \
          rsync \
          tree \
          python3

    - name: Download SDK (with fallback)
      id: get_sdk
      run: |
        for i in {1..3}; do
          if wget -T 60 ${{ env.SDK_URL }} -O sdk.tar.xz; then
            echo "status=success" >> $GITHUB_OUTPUT
            break
          else
            echo "Attempt $i failed, retrying..."
            sleep 5
          fi
        done

        if [ ! -f sdk.tar.xz ]; then
          wget -T 120 ${{ env.MIRROR_URL }} -O sdk.tar.xz || exit 1
        fi

        # Validate file
        if [ $(stat -c%s sdk.tar.xz) -lt 100000000 ]; then
          echo "::error::SDK file is too small (likely corrupted)"
          exit 1
        fi

    - name: Extract and verify SDK
      run: |
        # Extract with debug output
        tar -xvf sdk.tar.xz 2>&1 | tee tar.log
        
        # Find SDK directory
        SDK_DIR=$(find . -maxdepth 1 -type d -name "openwrt-sdk-*")
        if [ -z "$SDK_DIR" ]; then
          echo "::error::Could not find extracted SDK directory"
          cat tar.log
          exit 1
        fi

        mv "$SDK_DIR" sdk
        echo "SDK_PATH=$(pwd)/sdk" >> $GITHUB_ENV
        echo "STAGING_DIR=$(pwd)/sdk/staging_dir" >> $GITHUB_ENV
        
        # Verify toolchain
        if [ ! -d "${{ env.SDK_PATH }}/staging_dir/toolchain-mipsel_24kc_gcc-11.2.0_musl" ]; then
          echo "::error::Toolchain directory missing"
          tree -L 3 ${{ env.SDK_PATH }}/staging_dir
          exit 1
        fi

    - name: Prepare package
      run: |
        PKG_DIR="${{ env.SDK_PATH }}/package/qmodem"
        rm -rf "$PKG_DIR" || true
        mkdir -p "$PKG_DIR"
        
        # Safe copy with explicit excludes
        rsync -av \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='sdk' \
          --exclude='*.tar.xz' \
          "$GITHUB_WORKSPACE/" "$PKG_DIR/"

        # Critical file check
        if [ ! -f "$PKG_DIR/Makefile" ]; then
          echo "::error::Makefile is missing in package directory"
          ls -la "$PKG_DIR"
          exit 1
        fi

    - name: Compile with debug
      run: |
        cd ${{ env.SDK_PATH }}
        
        # Initialize environment
        export STAGING_DIR="${{ env.SDK_PATH }}/staging_dir"
        export PATH="$STAGING_DIR/toolchain-mipsel_24kc_gcc-11.2.0_musl/bin:$PATH"
        
        # Setup feeds
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        # Force enable package
        cat <<EOF > .config
CONFIG_PACKAGE_qmodem=y
EOF

        # Compile with full logging
        {
          make defconfig
          make package/qmodem/compile V=sc
        } 2>&1 | tee /tmp/full_build.log

        # Save logs even if build fails
        cp /tmp/full_build.log ${{ env.SDK_PATH }}/compile.log
        mkdir -p ${{ env.SDK_PATH }}/debug_info
        cp -r tmp/pkg/qmodem/* ${{ env.SDK_PATH }}/debug_info/ || true

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: |
          ${{ env.SDK_PATH }}/bin/packages/*/*.ipk
          ${{ env.SDK_PATH }}/compile.log
          ${{ env.SDK_PATH }}/debug_info/
        if-no-files-found: error

    - name: Post-failure debug
      if: ${{ failure() }}
      run: |
        echo "=== Final debug info ==="
        echo "::group::SDK directory structure"
        tree -L 3 ${{ env.SDK_PATH }}
        echo "::endgroup::"
        
        echo "::group::Last 50 lines of build log"
        tail -n 50 ${{ env.SDK_PATH }}/compile.log || true
        echo "::endgroup::"
        
        echo "::group::Toolchain verification"
        ${{ env.SDK_PATH }}/staging_dir/toolchain-*/bin/mipsel-openwrt-linux-gcc -v || true
        echo "::endgroup::"
